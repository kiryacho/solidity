# vim:syntax=dockerfile
#------------------------------------------------------------------------------
# Dockerfile for building and testing Solidity Compiler on CI
# Target: Ubuntu 18.10 (Cosmic Cuttlefish)
#
# This file is part of solidity.
#
# solidity is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# solidity is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with solidity.  If not, see <http://www.gnu.org/licenses/>
#
# (c) 2016-2019 solidity contributors.
#------------------------------------------------------------------------------
FROM buildpack-deps:cosmic

ARG DEBIAN_FRONTEND=noninteractive

RUN set -ex; \
	apt-get update; \
	apt-get install -qqy --no-install-recommends \
		build-essential \
		software-properties-common \
		cmake ninja-build \
		libboost-regex-dev libboost-filesystem-dev libboost-test-dev libboost-system-dev \
		libboost-program-options-dev \
		libjsoncpp-dev \
		; \
	apt-get install -qy python-sphinx; \
	rm -rf /var/lib/apt/lists/*

RUN set -ex; \
	apt-get -qq update; \
	apt-get -qy install llvm-7-dev libcvc4-dev libleveldb1v5 python-pip; \
	update-alternatives --install /usr/bin/llvm-symbolizer llvm-symbolizer /usr/bin/llvm-symbolizer-7 1; \
	pip install codecov; \
	rm -rf /var/lib/apt/lists/*

RUN set -ex; \
	git clone --depth=1 https://github.com/Z3Prover/z3.git /usr/src/z3; \
	mkdir /usr/src/z3/build; \
	cd /usr/src/z3/build; \
	cmake -DCMAKE_BUILD_TYPE="Release" -DCMAKE_INSTALL_PREFIX="/usr" -G "Ninja" ..; \
	ninja; \
	ninja install/strip; \
	rm -rf /usr/src/z3

# RUN set -ex; \
# 	apt-get -qq update; \
# 	apt-get install python-sphinx; \
# 	rm -rf /var/lib/apt/lists/*

ARG ALETH_VERSION="1.6.0"
ARG ALETH_URL="https://github.com/ethereum/aleth/releases/download/v${ALETH_VERSION}/aleth-${ALETH_VERSION}-linux-x86_64.tar.gz"
RUN wget -q -O- "${ALETH_URL}" | tar xzvpf - -C /usr

# install decent CVC4 (for Ubuntu >= 16.04 there is a package, libcvc4-dev)
# ARG CVC4_VER="1.7"
# ARG CVC4_URL="https://github.com/CVC4/CVC4/archive/${CVC4_VER}.tar.gz"
# RUN wget -q -O- "${CVC4_URL}" | tar xzpf - -C /usr/src
# RUN set -ex; \
# 	cd /usr/src/CVC4-${CVC4_VER}/contrib; \
# 	apt-get -q update; \
# 	apt-get install -qy libantlr3c-dev ; \
# 	./get-antlr-3.4; \
# 	cd /usr/src/CVC4-${CVC4_VER}; \
# 	./configure.sh production; \
# 	ls -hl; \
# 	cd build; \
# 	ls -hl; \
# 	make -j4; \
# 	make install; \
# 	rm -rf /usr/src/CVC4-${CVC4_VER}; \
# 	rm -rf /var/lib/apt/lists/*;

# ARG CVC4_VER="1.7"
# ARG CVC4_URL="https://github.com/CVC4/CVC4/archive/${CVC4_VER}.tar.gz"
# RUN wget -q -O- "${CVC4_URL}" | tar xzpf - -C /usr/src
# RUN set -ex; \
# 	cd /usr/src/CVC4-${CVC4_VER}/contrib; \
# 	apt-get -q update; \
# 	apt-get install -qy openjdk-8-jdk; \
# 	./get-antlr-3.4; \
# 	cd /usr/src/CVC4-${CVC4_VER}; \
# 	ls -hlsr; \
# 	export ANTLR=`pwd`/antlr-3.4/bin/antlr3; \
# 	./configure.sh production --antlr-dir=`pwd`/antlr-3.4; \
# 	cd build; \
# 	make -j4; \
# 	make install; \
# 	rm -rf /usr/src/CVC4-${CVC4_VER}; \
# 	rm -rf /var/lib/apt/lists/*;

#RUN apt-get -q update && apt-get install -qy openjdk-8-jdk
